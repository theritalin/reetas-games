import React, { useState, useEffect } from "react";
import { Box, Button, Heading, VStack } from "@chakra-ui/react";
import { Progress } from "@chakra-ui/react";
import { Sparkles, Clock, Target, RotateCcw, X } from "lucide-react";

const generateRandomNumbers = () => {
  const smallNumbers = Array.from(
    { length: 5 },
    () => Math.floor(Math.random() * 9) + 1
  );
  const largeNumber = Math.floor(Math.random() * 90) + 10;
  return [...smallNumbers, largeNumber];
};

const generateTargetNumber = () => Math.floor(Math.random() * 900) + 100;

const OPERATIONS = ["+", "-", "×", "÷"];

export default function MathGame() {
  const [targetNumber, setTargetNumber] = useState(generateTargetNumber());
  const [initialNumbers, setInitialNumbers] = useState(generateRandomNumbers());
  const [numbers, setNumbers] = useState([...initialNumbers]);
  const [currentCalculation, setCurrentCalculation] = useState([]);
  const [calculations, setCalculations] = useState([]);
  const [timer, setTimer] = useState(60); // 3 minutes
  const [gameOver, setGameOver] = useState(false);

  useEffect(() => {
    let interval;
    if (!gameOver && timer > 0) {
      interval = setInterval(() => {
        setTimer((prevTimer) => {
          if (prevTimer <= 1) {
            clearInterval(interval);
            setGameOver(true);
            return 0;
          }
          return prevTimer - 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [gameOver, timer]);

  const handleNumberClick = (num, index) => {
    setCurrentCalculation([...currentCalculation, num]);
    setNumbers(numbers.filter((_, i) => i !== index));
  };

  const handleOperationClick = (op) => {
    setCurrentCalculation([...currentCalculation, op]);
  };

  const handleCalculationItemClick = (index) => {
    const item = currentCalculation[index];
    setCurrentCalculation(currentCalculation.filter((_, i) => i !== index));
    if (typeof item === "number") {
      setNumbers([...numbers, item]);
    }
  };

  const calculateResult = () => {
    const calculation = currentCalculation
      .join(" ")
      .replace("×", "*")
      .replace("÷", "/");
    try {
      const result = eval(calculation);
      if (result === targetNumber) {
        setGameOver(true);
      }
      setCalculations([
        ...calculations,
        {
          expression: currentCalculation.join(" "),
          result,
          numbers: currentCalculation.filter(
            (item) => typeof item === "number"
          ),
          usedCalculations: calculations.length,
        },
      ]);
      setNumbers([...numbers, result]);
      setCurrentCalculation([]);
    } catch (error) {
      console.error("Invalid calculation");
    }
  };

  const deleteCalculation = (index) => {
    /*     const calculationToDelete = calculations[index];
    const updatedCalculations = calculations.filter((_, i) => i !== index);

    // Recursively delete dependent calculations
    const dependentIndices = calculations
      .slice(index + 1)
      .map((calc, i) => (calc.usedCalculations > index ? i + index + 1 : -1))
      .filter((i) => i !== -1);

    dependentIndices.forEach((i) => {
      updatedCalculations.splice(i - 1, 1);
    });

    setCalculations(updatedCalculations);

    // Add back the original numbers used in the deleted calculation
    const numbersToAdd = calculationToDelete.numbers.filter(
      (n) => !updatedCalculations.some((calc) => calc.numbers.includes(n))
    );
    setNumbers([...numbers, ...numbersToAdd]); */
  };

  const resetGame = () => {
    setNumbers([...initialNumbers]);
    setCurrentCalculation([]);
    setCalculations([]);
    setGameOver(false);
  };

  const startNewGame = () => {
    const newInitialNumbers = generateRandomNumbers();
    setTargetNumber(generateTargetNumber());
    setInitialNumbers(newInitialNumbers);
    setNumbers(newInitialNumbers);
    setCurrentCalculation([]);
    setCalculations([]);
    setTimer(60);
    setGameOver(false);
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-purple-700 to-indigo-900 p-4">
      <Box className="w-full max-w-md bg-white/10 backdrop-blur-md border-none text-white">
        <VStack className="space-y-1">
          <Heading className="text-2xl font-bold text-center">
            Math Challenge
          </Heading>
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-2">
              <Target className="h-5 w-5 text-yellow-400" />
              <span className="text-xl font-semibold">{targetNumber}</span>
            </div>
            <div className="flex items-center space-x-2">
              <Clock className="h-5 w-5 text-green-400" />
              <span className="text-xl font-semibold">
                {Math.floor(timer / 60)}:
                {(timer % 60).toString().padStart(2, "0")}
              </span>
            </div>
          </div>
          <Progress value={(timer / 60) * 100} className="h-2 bg-gray-600" />
        </VStack>

        <VStack className="space-y-4">
          <div className="bg-white/20 p-4 rounded-lg h-[200px] w-[400px] overflow-y-auto">
            <div className="flex flex-wrap items-start content-start ">
              {currentCalculation.map((item, index) => (
                <Button
                  key={index}
                  variant="ghost"
                  className="m-1 p-1 text-lg bg-white/30 hover:bg-white/40 text-white"
                  onClick={() => handleCalculationItemClick(index)}
                >
                  {item}
                </Button>
              ))}
            </div>
            {calculations.map((calc, index) => (
              <div
                key={index}
                className="flex justify-between items-center text-sm text-gray-300 mt-2"
              >
                <span>
                  {calc.expression} = {calc.result}
                </span>
                <Button
                  variant="ghost"
                  size="sm"
                  className="p-0 h-6 w-6"
                  onClick={() => deleteCalculation(index)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
          <div className="grid grid-cols-3 gap-2">
            {numbers.map((num, index) => (
              <Button
                key={`${num}-${index}`}
                onClick={() => handleNumberClick(num, index)}
                disabled={gameOver}
                className="text-lg font-bold bg-indigo-600 hover:bg-indigo-700"
              >
                {num}
              </Button>
            ))}
          </div>
          <div className="grid grid-cols-4 gap-2">
            {OPERATIONS.map((op) => (
              <Button
                key={op}
                onClick={() => handleOperationClick(op)}
                disabled={gameOver}
                className="text-lg font-bold bg-purple-600 hover:bg-purple-700"
              >
                {op}
              </Button>
            ))}
          </div>
          <div className="flex justify-between">
            <Button
              onClick={calculateResult}
              disabled={gameOver || currentCalculation.length < 3}
              className="bg-green-600 hover:bg-green-700"
            >
              =
            </Button>
            <Button
              onClick={resetGame}
              className="bg-yellow-600 hover:bg-yellow-700"
            >
              <RotateCcw className="mr-2 h-4 w-4" /> Reset
            </Button>
          </div>
          {gameOver && (
            <div className="mt-4 text-center bg-white/20 p-4 rounded-lg">
              <h2 className="text-2xl font-bold flex items-center justify-center">
                <Sparkles className="mr-2 h-6 w-6 text-yellow-400" />
                {calculations.some((calc) => calc.result === targetNumber)
                  ? "Congratulations!"
                  : "Game Over!"}
              </h2>
              <p className="text-lg mt-2">
                {calculations.some((calc) => calc.result === targetNumber)
                  ? "You won!"
                  : "Better luck next time!"}
              </p>
              <Button
                onClick={startNewGame}
                className="mt-4 bg-blue-600 hover:bg-blue-700"
              >
                Start New Game
              </Button>
            </div>
          )}
        </VStack>
      </Box>
    </div>
  );
}
